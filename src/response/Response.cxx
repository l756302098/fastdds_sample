// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Response.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Response.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define mind_interfaces_msg_Response_max_cdr_typesize 409613ULL;
#define mind_interfaces_msg_Response_max_key_cdr_typesize 0ULL;

mind_interfaces::msg::Response::Response()
{
    // long long m_index
    m_index = 0;
    // string m_data
    m_data ="";

}

mind_interfaces::msg::Response::~Response()
{


}

mind_interfaces::msg::Response::Response(
        const Response& x)
{
    m_index = x.m_index;
    m_data = x.m_data;
}

mind_interfaces::msg::Response::Response(
        Response&& x) noexcept 
{
    m_index = x.m_index;
    m_data = std::move(x.m_data);
}

mind_interfaces::msg::Response& mind_interfaces::msg::Response::operator =(
        const Response& x)
{

    m_index = x.m_index;
    m_data = x.m_data;

    return *this;
}

mind_interfaces::msg::Response& mind_interfaces::msg::Response::operator =(
        Response&& x) noexcept
{

    m_index = x.m_index;
    m_data = std::move(x.m_data);

    return *this;
}

bool mind_interfaces::msg::Response::operator ==(
        const Response& x) const
{

    return (m_index == x.m_index && m_data == x.m_data);
}

bool mind_interfaces::msg::Response::operator !=(
        const Response& x) const
{
    return !(*this == x);
}

size_t mind_interfaces::msg::Response::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return mind_interfaces_msg_Response_max_cdr_typesize;
}

size_t mind_interfaces::msg::Response::getCdrSerializedSize(
        const mind_interfaces::msg::Response& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.data().size() + 1;


    return current_alignment - initial_alignment;
}

void mind_interfaces::msg::Response::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_index;
    scdr << m_data.c_str();

}

void mind_interfaces::msg::Response::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_index;
    {
        std::string aux;
        dcdr >> aux;
        m_data = aux.c_str();
    }
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void mind_interfaces::msg::Response::index(
        int64_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
int64_t mind_interfaces::msg::Response::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
int64_t& mind_interfaces::msg::Response::index()
{
    return m_index;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void mind_interfaces::msg::Response::data(
        const eprosima::fastrtps::fixed_string<409600>& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void mind_interfaces::msg::Response::data(
        eprosima::fastrtps::fixed_string<409600>&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const eprosima::fastrtps::fixed_string<409600>& mind_interfaces::msg::Response::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
eprosima::fastrtps::fixed_string<409600>& mind_interfaces::msg::Response::data()
{
    return m_data;
}


size_t mind_interfaces::msg::Response::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return mind_interfaces_msg_Response_max_key_cdr_typesize;
}

bool mind_interfaces::msg::Response::isKeyDefined()
{
    return false;
}

void mind_interfaces::msg::Response::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



